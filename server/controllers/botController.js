const express = require('express')
const bcrypt = require('bcryptjs') // –ü–∞–∫–µ—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
const jwt = require('jsonwebtoken')  // –ü–∞–∫–µ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
const ncp = require('copy-paste') // –ü–∞–∫–µ—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ—Ä–æ–º–∞—Ü–∏–∏ –≤ –±—É—Ñ–µ—Ä
const TelegramApi = require('node-telegram-bot-api') // –ü–∞–∫–µ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Api BOT

const connectionDB = require('./connectionDB')
const { SECRET_RECOVERY_KEY, SECRET_IDENTIFICATION_KEY } = require('../config')
const { buttonsForPassword, buttonsForCopyToken } = require('./keyboards')

// –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /recoveryPass
const router = express.Router()
router.post('/', (req, res) => {
    const { login } = req.body
    const SQL_QUERY = `SELECT * FROM users_list WHERE login='${login}'`
    connectionDB.query(SQL_QUERY, async (err, result) => {
        if (err) { res.status(500).send('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞') }
        else {
            if (result.length == 0) { res.status(400).send('–î–∞–Ω–Ω—ã–π login –Ω–µ –Ω–∞–π–¥–µ–Ω') }
            else {
                const USER = result[0]
                if (!USER.recovery_token) { res.status(501).send('–î–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ') }
                else {

                    const { chatId, identificationToken } = jwt.verify(USER.recovery_token, SECRET_RECOVERY_KEY)

                    const { login } = jwt.verify(identificationToken, SECRET_IDENTIFICATION_KEY)

                    currentLogin = login
                    currentTopic = `–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è`

                    await bot.sendSticker(chatId, 'https://tlgrm.ru/_/stickers/a6f/1ae/a6f1ae15-7c57-3212-8269-f1a0231ad8c2/1.webp')
                    await bot.sendMessage(chatId, '–ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?')
                    await bot.sendMessage(chatId, '–ù–µ –±–µ–¥–∞! –°–µ–π—á–∞—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–º...')
                    await bot.sendMessage(chatId, `–Ø –æ–±–Ω–∞—Ä—É–∂–∏–ª, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∞–∫–∫–∞—É–Ω—Ç–∞ '${login}'`)
                    await bot.sendMessage(chatId, '‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∏ –Ω–µ –≤—ã, –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')

                    setTimeout(async () => { await bot.sendMessage(chatId, '–ï—Å–ª–∏ —ç—Ç–æ –≤—ã, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:') }, 3000)

                    res.status(200).send('–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
                }
            }
        }
    })
})
module.exports = router

// ------------------------------------------------------------------------------------

// –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
const BOT_TOKEN = '7701017604:AAGHWpM-DPXhtLgsuZNYC4vfkc5F1J4TtmY'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramApi(BOT_TOKEN, { polling: true })

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let currentTopic = '' // –¢–µ–∫—É—â–∞—è —Ç–µ–º–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
let recoveryToken = '' // –¢–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
let newPass = '' // –ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å (–¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
let currentLogin = '' // –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ—Ç–æ—Ä—ã–π –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–æ–ª—å)

// –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–µ–ª–µ–Ω–∏—è
function generateRecoveryToken(chatId, identificationToken) {
    const payload = { chatId, identificationToken }
    return jwt.sign(payload, SECRET_RECOVERY_KEY)
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞
function startBot() {
    // –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot.setMyCommands([
        { command: '/start', description: '–ü–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è!' },
        { command: '/getinfo', description: '–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞' },
        { command: '/getrecoverytoken', description: '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è' },
    ])

    bot.on('message', async (msg) => {
        const message = msg.text
        const chatId = msg.chat.id

        if (message == '/start') { return await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –ø–∞—Ä–æ–ª–µ–π`) }

        if (message == '/getinfo') { return await bot.sendMessage(chatId, chatId) }

        if (message == '/getrecoverytoken') {
            currentTopic = '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è'
            return await bot.sendMessage(chatId, '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:')
        }

        // –¢–µ–º–∞ = –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if (currentTopic == '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è') {
            currentTopic = ''
            recoveryToken = generateRecoveryToken(chatId, message)
            await bot.sendMessage(chatId, '–í–∞—à —Ç–æ–∫–µ–Ω –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ' + recoveryToken, buttonsForCopyToken)
            return await bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –≤ –±—É–¥—É—â–µ–º!')
        }

        // –¢–µ–º–∞ = –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        if (currentTopic == '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è') {
            newPass = message
            return await bot.sendMessage(chatId, `–í–∞—à –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å '${message}'. –í—Å–µ –≤–µ—Ä–Ω–æ?`, buttonsForPassword)
        }

        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
        return await bot.sendSticker(chatId, 'https://cdn.tlgrm.ru/stickers/a6f/1ae/a6f1ae15-7c57-3212-8269-f1a0231ad8c2/16.webp')
            .then(() => { bot.sendMessage(chatId, `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞...`) })
    })

    // –†–µ–∞–∫—Ü–∏—è –Ω–∞ Telegram-–∫–Ω–æ–ø–∫–∏
    bot.on('callback_query', async (msg) => {
        const data = msg.data
        const chatId = msg.message.chat.id

        // –ö–Ω–æ–ø–∫–∞ = –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω
        if (data == 'copyToken') {
            ncp.copy(recoveryToken, async () => { return await bot.sendMessage(chatId, '–¢–æ–∫–µ–Ω —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω. –£–¥–∞—á–∏!') })
        }
        // –¢–µ–º–∞ = –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        if (currentTopic == '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è') {
            if (data == 'passIsCorrect') {
                // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
                const hashPass = bcrypt.hashSync(newPass, 5);
                const SQL_QUERY = `UPDATE users_list SET password='${hashPass}' WHERE users_list.login='${currentLogin}'`
                // –ú–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
                connectionDB.query(SQL_QUERY, (err, result) => {
                    if (err) { bot.sendMessage(chatId, '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ :(('); console.log(err); }
                    else { return bot.sendMessage(chatId, `–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!`) }
                })
                currentTopic = '';
            }
            if (data == 'passIsIncorrect') { bot.sendMessage(chatId, '–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...') }
            if (data == 'cancel') { currentTopic = ''; bot.sendMessage(chatId, '–°—É–ø–µ—Ä! –ó–∞–ø–∏—à–∏üòÅ') }
        }
    })
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
startBot()